variables:
  dockerRegistryServiceConnection: 'docker-hub-connection'
  imageRepository: 'prmd77/cloudsurgeimag'
  dockerfilePath: 'Dockerfile'
  tag: '$(Build.BuildId)'
  k8sNamespace: 'prod'
  k8sManifestFolder: 'manifests'
  nodeVersion: '18.x'

trigger:
  branches:
    include:
      - main

pool: 
  name: "Infra-Runners-pool"
  demands:
    - agent.name -equals office
     
# stage one 
stages:
  - stage: "nodejsInstall"
    displayName: "NodeJs Tool Installation Stage"
    jobs:
      - job: "nodejsInstallJob"
        displayName: "NPM Install and Build"
        steps:
        - task: NodeTool@0
          inputs:
            versionSource: 'spec'
            versionSpec: '18'
            checkLatest: true

        - script: |
            npm install
            npm run build
            mkdir -p $(Build.ArtifactStagingDirectory)
            cp -r build/* $(Build.ArtifactStagingDirectory)
          displayName: "Install dependencies and build app"
          
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/build'
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/drop'

        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)drop'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        
# ------------------------
# Stage 2: Docker Build & Push
  - stage: DockerImage
    displayName: "Build and Push Docker Image"
    dependsOn: nodejsInstall
    jobs:
      - job: containerization
        displayName: "containerization"
        steps:
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(Pipeline.Workspace)'

        - task: Docker@2
          inputs:
            containerRegistry: 'DockerHubConnection'
            repository: 'prmd77/cloudsurgeimag'
            command: 'buildAndPush'
            Dockerfile: '**/Dockerfile'
            buildContext: '$(Pipeline.Workspace)/drop'
            tags: '$(Build.BuildId)'
         
# ------------------------
# Stage 3: Deploy to Kubernetes
  - stage: "DeployToAKS"
    displayName: "Deploy To Kubernetes"
    dependsOn: DockerImage
    jobs:
      - job: "DeplpytoAKS"
        displayName: "DeployToKubernetes"
        steps:
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(Pipeline.Workspace)'

        - task: KubernetesManifest@1
          inputs:
            action: 'deploy'
            connectionType: 'kubernetesServiceConnection'
            kubernetesServiceConnection: 'aks-service-connection'
            namespace: 'prod'
            manifests: '$(Pipeline.Workspace)/drop/manifests/*.yaml'
